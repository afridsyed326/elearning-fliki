Project Architecture Explanation

The project is a full-stack e-learning platform built as a monorepo using Nx. The architecture is designed for scalability, code sharing, and developer efficiency.

Frontend:
We use Next.js for the web application, which provides server-side rendering, routing, and a great developer experience. The UI is styled with Tailwind CSS for rapid and consistent design. For API communication, we use tRPC, which gives us end-to-end type safety between the frontend and backend.

Backend:
The backend is built with Express.js and tRPC. Express handles HTTP requests, while tRPC allows us to define type-safe API routes without needing REST or GraphQL schemas. We use custom authentication logic with JWT tokens for secure user sessions, and bcryptjs for password hashing.

Database:
MongoDB is our database, accessed via Mongoose. We have models for users, courses, and enrollments:

The UserModel manages user data and roles (student or teacher).
The CourseModel stores course details, lessons, and references to the teacher.
The EnrollmentModel tracks which students are enrolled in which courses, their progress, and completed lessons.
Shared Libraries:
We have shared TypeScript libraries for types, interfaces, and tRPC client/server logic. This ensures type safety and code reuse across the stack.

Services:
For business logic, we have service files (like course.services.ts) that handle creating and updating courses, enrolling students, and updating course progress. These services interact directly with the Mongoose models and encapsulate the main operations needed for the platform.

Tooling:
The project uses pnpm for fast, workspace-aware package management. ESLint, Prettier, Husky, and lint-staged are set up for code quality and pre-commit checks.

Summary:
This architecture allows us to build features quickly, maintain type safety across the stack, and scale the codebase as the platform grows. It also makes onboarding new developers easier, since the code is modular and well-organized.